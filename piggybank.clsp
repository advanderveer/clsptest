(mod 
    (
        curr_balance ; current piggybank balance
        new_balance ; new balance for the piggybank
        self_puzzlehash ; this coin's hash for re-creation of the coin
    ) 
    
    (defconstant COND_CREATE_COINT 51)    
    (defconstant SAVINGS_GOAL 500)
    (defconstant PAYOUT_PUZZLEHASH 0xcafef00d)
    
    ; helper function that performs the logic that pays to the target wallet when the savings goal is reached
    (defun-inline cash_out (self_puzzlehash)
        (list 
            (list COND_CREATE_COINT PAYOUT_PUZZLEHASH new_balance) ; create a new coin that (?)
            (list COND_CREATE_COINT self_puzzlehash 0) ; re-create itself with a balance of 0
        )
    )

    ; helper function that returns a condition such that the coin re-recreates itself
    (defun-inline recreate_self (curr_balance new_balance self_puzzlehash) 
        (list 
            (list COND_CREATE_COINT self_puzzlehash new_balance)
        )
    )
    
    ; main logic
    (if (> new_balance curr_balance)         
            (if (> new_balance SAVINGS_GOAL)        
                (cash_out self_puzzlehash) ;payout
                (recreate_self curr_balance new_balance self_puzzlehash) ; re-create with new balance
            )        
        (x "new balance not larger than current balance") ; new_balance is not larger than current balance
    )
)
